openapi: 3.0.4
info:
  title: printer-shop
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1
paths:
  /Produsers:
    get:
      summary: Get all producers.
      tags:
        - Producer
      operationId: getAllProducers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producer'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post: 
      summary: Create producer
      tags:
        - Producer
      operationId: createProducer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProducerRequest'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producer_id}: 
    get:
      summary: Get producer by id.
      tags:
        - Producer
      operationId: getProducerById
      parameters:
        - name: producer_id
          in: path
          description: Id of producer to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete producer by id.
      tags:
        - Producer
      operationId: deleteProducerById
      parameters:
        - name: producer_id
          in: path
          description: Id of producer to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producer deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      summary: Update producer by id.
      tags:
        - Producer
      operationId: updateProducerById
      parameters:
        - name: producer_id
          in: path
          description: Id of producer to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProducerRequest'
      responses:
        '200':
          description: Producer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'          
        '400':
          description: Ivalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      summary: Get all products.
      tags:
        - Product
      operationId: getAllProducts
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create product
      tags:
        - Product
      operationId: crateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{product_id}:
    get:
      summary: Get product by id.
      tags:
        - Product
      operationId: getProductById
      parameters:
        - name: product_id
          in: path
          description: Id of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete product by id.
      tags:
        - Product
      operationId: deleteProductById
      parameters:
        - name: product_id
          in: path
          description: Id of product to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      summary: Update product by id.
      tags:
        - Product
      operationId: updateProductById
      parameters:
        - name: product_id
          in: path
          description: Id of product to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Ivalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users 
      tags:
        - User
      operationId: getAllUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post: 
      summary: User registration
      tags: 
        - User
      operationId: userRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest' 
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    get:
      summary: Get user by id.
      tags:
        - User
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: Id of user to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      summary: Update user by id.
      tags:
        - User
      operationId: updateUserById.
      parameters:
        - name: user_id
          in: path
          description: Id of user to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete: 
      summary: Delete user by id.
      tags:
        - User
      operationId: deleteUserById
      parameters:
        - name: user_id
          in: path
          description: Id of user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart:
    get:
      summary: Get all products in cart.
      tags:
        - Cart
      operationId: getAllProductsInCart
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCart'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add rpoduct to cart
      tags:
        - Cart
      operationId: addProductToCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductsToCart'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders: 
    get:
      summary: Get all orders.
      tags:
        - Order
      operationId: getAllOrders
      parameters:
        - name: user_id
          in: query
          description: Id of user of order
          required: false
          schema:
            type: string
        - name: order_status
          in: query
          description: Status of order
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post: 
      summary: Place order
      tags: 
        - Order
      operationId: placeOrder
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCart'
      responses: 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /order/{order_id}:
    get: 
      summary: Get order by id
      tags:
        - Order
      operationId: getOrderById 
      parameters:
        - name: order_id
          in: path
          description: Id of order to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      summary: Update order
      tags:
        - Order
      operationId: updateOrderById
      parameters:
        - name: order_id
          in: path
          description: Id of order to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInCart'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete order by id
      tags:
        - Order
      operationId: deleteOrderById
      parameters:
        - name: order_id
          in: path
          description: Id of order to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile:
    get:
      summary: Get profile.
      tags:
        - Profile
      operationId: getProfile
      responses:
        '401':
          description: Unauthorized
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      summary: Update profile.
      tags:
        - Profile
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    post:
      summary: Authentication
      tags:
        - Authentication
      operationId: authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: Successfully logged in
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '403':
          description: Wrong email or password
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/refresh-tokens:
    post: 
      summary: Refresh tokens
      tags:
        - Authentication
      operationId: refreshTokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successfully logged in
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '403':
          description: Refresh Token expired 
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



      





        

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
        - producer
        - status
      properties:
        id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        name:
          type: string
          example: HP LaserJet 1080
        price:
          type: number
          format: float
          example: 17500.50
        producer:
            $ref: '#/components/schemas/Producer'
        status:
          type: string
          example: published
          enum:
            - published
            - hidden
        created_at:
          type: string
          format: date-time
    ProductInCart:
      type: object
      required:
        - id
        - name
        - price
        - producer
        - status
        - count
      properties:
        id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        name:
          type: string
          example: HP LaserJet 1080
        price:
          type: number
          format: float
          example: 17500.50
        producer:
          $ref: '#/components/schemas/Producer'
        status:
          type: string
          example: published
          enum:
            - published
            - hidden
        created_at:
          type: string
          format: date-time
        count:
          type: integer
          example: 8
    CreateProductRequest:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: HP LaserJet 1080
        price:
          type: number
          format: float
          example: 17500.50
        producer_id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        status:
          type: string
          example: published
          enum:
            - published
            - hidden
    Producer:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        name:
          type: string
          example: Hewlett-Packard
        description:
          type: string
          example: The Hewlett-Packard Company was founded by Bill Hewlett and David Packard in 1939
        created_at:
          type: string
          format: date-time
    CreateProducerRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Hewlett-Packard
        description:
          type: string
          example: The Hewlett-Packard Company was founded by Bill Hewlett and David Packard in 1939
    User:
      type: object
      required:
        - id
        - email
        - status
        - role
        - created_at
      properties:
        id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        first_name:
          type: string
          example: Ivan
        last_name:
          type: string
          example: Ivanov
        email:
          type: string
          format: email
          example: ivan@gmail.com
        status:
          type: string
          example: active
          enum:
            - active
            - blocked
        role:
          type: string
          example: customer
          enum:
            - customer
            - admin
        created_at:
          type: string
          format: date-time
    CreateUserRequest:
      type: object
      required:
        - email
        - status
        - password
      properties:
        first_name:
          type: string
          example: Ivan
        last_name:
          type: string
          example: Ivanov
        email:
          type: string
          format: email
          example: ivan@gmail.com
        password:
          type: string
          format: password
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string 
    AddProductsToCart:
      type: object
      required:
        - product_id
        - count
      properties:
        product_id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        count:
          type: integer
          example: 8
    Order:
      type: object
      required:
        - order_id
        - status
        - products
      properties:
        order_id:
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        user: 
          type: string
          example: 2cf72d73-0e08-4baf-a10f-f130c942dc38
        status:
          type: string
          example: new
          enum:
            - new
            - in_progress
            - done
        products: 
          type: array
          items:
            $ref: '#/components/schemas/ProductInCart'
    Authentication:
      type: object
      required: 
        - email
        - password
      properties: 
        email:
          type: string
          format: email
          example: ivan@gmail.com
        password:
          type: string
    Tokens:
      type: object
      required:
        - token
        - refresh_token
      properties:
        token: 
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJBdXRoIFNlcnZlciIsInN1YiI6ImF1dGgiLCJleHAiOjE1MDU0Njc3NTY4NjksImlhdCI6MTUwNTQ2NzE1MjA2OSwidXNlciI6MX0.9VPGwNXYfXnNFWH3VsKwhFJ0MazwmNvjSSRZ1vf3ZUU
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJBdXRoIFNlcnZlciIsInN1YiI6ImF1dGgiLCJleHAiOjE1MDU0Njc3NTY4NjksImlhdCI6MTUwNTQ2NzE1MjA2OSwidXNlciI6MX0.9VPGwNXYfXnNFWH3VsKwhFJ0MazwmNvjSSRZ1vf3ZUU
    RefreshToken:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJBdXRoIFNlcnZlciIsInN1YiI6ImF1dGgiLCJleHAiOjE1MDU0Njc3NTY4NjksImlhdCI6MTUwNTQ2NzE1MjA2OSwidXNlciI6MX0.9VPGwNXYfXnNFWH3VsKwhFJ0MazwmNvjSSRZ1vf3ZUU
